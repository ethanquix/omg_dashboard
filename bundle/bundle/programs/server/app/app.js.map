{"version":3,"sources":["meteor://ðŸ’»app/lib/collections/tradedb.js","meteor://ðŸ’»app/server/getData.js","meteor://ðŸ’»app/server/methods.js","meteor://ðŸ’»app/server/main.js"],"names":["TradesDB","Mongo","Collection","CandlesDB","Meteor","getCandlesFurl","HTTP","call","params","error","response","console","log","value","content","substring","curTime","Math","round","Date","insert","val","curr","getTrades","Trades","changes","run","err","result","each","bindEnvironment","row","Users","filter","id","new_val","user_id","res","nres","name","facebook","money","String","outcome","mclass","resultstr","final","amount","cm","valueOf","type","replace","isServer","Rethink","Table","publish","ready","find","methods","out","count","startup","setInterval"],"mappings":"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","file":"/app.js","sourcesContent":["TradesDB = new Mongo.Collection('trades');\nCandlesDB = new Mongo.Collection('candles');","import {Meteor} from 'meteor/meteor';\n\ngetCandlesFurl = function() {\n  HTTP.call('GET', 'http://webrates.truefx.com/rates/connect.html', {\n        params: {\n          \"c\": \"EUR/USD\"\n        }\n      },\n      function (error, response) {\n        if (error) {\n          console.log(error);\n        } else {\n          let value = response.content.substring(7, 15) * 10000 % 10;\n          let curTime = Math.round(+ new Date() / 1000);\n\n          CandlesDB.insert({\n            val: value,\n            curr: \"EUR/USD\",\n            curTime: curTime\n          });\n        }\n      }\n  );\n};\n\ngetTrades = function() {\n  Trades.changes().run((err, result) => {\n    result.each(Meteor.bindEnvironment(function (err, row) {\n      Users.filter({id: row.new_val.user_id}).run(function (err, res) {\n        res.each(function (err, nres) {\n          let name = \"Jon Doe\";\n          if (nres.facebook) {\n            name = nres.facebook.name;\n          }\n          let money = String(row.new_val.outcome);\n          let mclass = \"\";\n          let curr = \"â‚¬\";\n          let resultstr = \"trade\";\n          let final = \" from \" + String(row.new_val.amount) + curr;\n          let cm = ~~(new Date().valueOf() / 60000);\n          let type = row.new_val.type;\n\n          if (row.new_val.outcome == null) {\n            mclass = \"event-bet\";\n            money = String(row.new_val.amount);\n            final = \" on \" + row.new_val.type;\n          }\n          else if (row.new_val.outcome > 0) {\n            mclass = \"event-win\";\n            resultstr = \"win\";\n            type = null;\n          }\n          else {\n            resultstr = \"lost\";\n            mclass = \"event-loss\";\n            type = null;\n          }\n\n          money = money.replace('-', '');\n          let curTime = Math.round(+ new Date() / 1000);\n\n          TradesDB.insert({\n            money: money,\n            mclass: mclass,\n            curr: curr,\n            resultstr: resultstr,\n            final: final,\n            name: name,\n            cm: cm,\n            curTime: curTime,\n            type: type\n          });\n        });\n      });\n    }));\n  });\n}","if (Meteor.isServer) {\n  Trades = new Rethink.Table('trade');\n  Users = new Rethink.Table('user');\n\n  Meteor.publish('trades', function () {\n    this.ready();\n    return (TradesDB.find());\n  });\n\n\n  Meteor.publish('candles', function () {\n    this.ready();\n    return (CandlesDB.find());\n  });\n\n  Meteor.methods({\n\n    getTrades: function () {\n      let out = Trades.count().run();\n      return (out);\n    }\n  });\n}\n","import {Meteor} from 'meteor/meteor';\n\nMeteor.startup(() => {\n  Meteor.setInterval(getCandlesFurl, 1000);\n  getTrades();\n  //Code to run at Startup\n});\n"]}